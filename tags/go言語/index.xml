<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Go言語 on lottoHub</title><link>https://lottotto.github.io/blog/tags/go%E8%A8%80%E8%AA%9E/</link><description>Recent content in Go言語 on lottoHub</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 29 Jan 2022 17:20:36 +0900</lastBuildDate><atom:link href="https://lottotto.github.io/blog/tags/go%E8%A8%80%E8%AA%9E/index.xml" rel="self" type="application/rss+xml"/><item><title>go言語のbyte.bufferについて</title><link>https://lottotto.github.io/blog/posts/go-ioreader/</link><pubDate>Sat, 29 Jan 2022 17:20:36 +0900</pubDate><guid>https://lottotto.github.io/blog/posts/go-ioreader/</guid><description>モチベーション Goの受け取ったデータを読んだり書いたりうまくできているのは、ReadメソッドとWriteメソッド、そしてどのメソッドを持つ、io.Reader、io.Writerといったインターフェースである。bytes.bufferをお題に色々忘れないようにメモしていく
byteとは 1バイトの範囲（1から255）を表すデータ型。 Go言語では、ファイル処理だったり、画像だったり、リクエストだったり色々な面で[]byteが出てくる。 もちろんstringも文字コードで表現されることから2バイトであるので、bytes型のスライスとして表現されることは多い。 []byteとstringの変換は下記の通り
// []bytes -&amp;gt; string の変換 str := string([]bytes) // string -&amp;gt; []bytesの変換 b := []byte(str) このようにbyte型のスライスは頻出で簡単にstringに変換できる。このbyte型のスライスを色々簡単に操作できるようなパッケージがbytesパッケージになる。詳しくは公式ドキュメント参照。https://pkg.go.dev/byte
bytesパッケージの中で2つだけ型が宣言されている.bytes.buffer型とreader型である。これをみていく
bytes.bufferとは bytes.bufferとは、readメソッドとwriteメソッドを持つ可変サイズのバイトバッファーです。 色々おさらいしていきます。bufferとは基本的には、データを一時的に記憶する場所のことを言います。なのでその一時保存領域を読んだり、一時領域に書いたりすることができるわけです。
// バッファからlen(p)サイズ文を読み取りpに格納する package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { str := &amp;#34;123456789&amp;#34; b := []byte(str) fmt.Println(b) b2 := []byte{0, 0} buf := bytes.NewBuffer(b) _, err := buf.Read(b2) if err != nil { panic(err) } // バッファからlen(p)サイズ文を読み取りpに格納する fmt.Println(string(b2)) } 実行すると12という結果が得られます。b2は2つの領域を定義しており、それが上書きされる挙動になっています。一方Writeの方は、</description></item></channel></rss>